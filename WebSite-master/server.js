import express from "express";
import sqlite3 from "sqlite3";
import bodyParser from "body-parser";
import cors from "cors";
import path from "path";
import { fileURLToPath } from "url";
import nodemailer from "nodemailer";

import dotenv from 'dotenv';
dotenv.config();


// –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ë–î
const app = express();
const PORT = 3000;
const db = new sqlite3.Database(
  path.join(__dirname, "db.sqlite"),
  err => err && console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ:", err)
);

// Nodemailer transporter (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env –¥–ª—è EMAIL_USER –∏ EMAIL_PASS)
const mailer = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 465,
  secure: true,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// –ú–∏–¥–ª–≤–∞—Ä—ã
app.use(cors());
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, "public")));

// –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
const initialHotels = [
  { title: '"–†–∏—Ç—Ü –ö–∞—Ä–ª—Ç–æ–Ω" –ê–ª–º–∞—Ç—ã', description: '–†–æ—Å–∫–æ—à–Ω—ã–π 5-–∑–≤–µ–∑–¥–æ—á–Ω—ã–π –æ—Ç–µ–ª—å', price: '‚Ç∏ 45 000 / –Ω–æ—á—å', rating: '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', image: 'https://source.unsplash.com/800x600/?luxury,hotel' },
  { title: '–û—Ç–µ–ª—å "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω"', description: '–û—Ç–µ–ª—å —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä—ã', price: '‚Ç∏ 30 000 / –Ω–æ—á—å', rating: '‚òÖ‚òÖ‚òÖ‚òÖ', image: 'https://source.unsplash.com/800x600/?building,hotel' },
  { title: '"Holiday Inn Express"', description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–µ–ª—å —Å –∑–∞–≤—Ç—Ä–∞–∫–æ–º', price: '‚Ç∏ 25 000 / –Ω–æ—á—å', rating: '‚òÖ‚òÖ‚òÖ', image: 'https://source.unsplash.com/800x600/?holiday-inn,hotel' }
];

// –°—Ö–µ–º–∞ –ë–î –∏ —Å–∏–¥ –¥–∞–Ω–Ω—ã—Ö
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS users (
                                               id INTEGER PRIMARY KEY AUTOINCREMENT,
                                               name TEXT NOT NULL,
                                               surname TEXT NOT NULL,
                                               email TEXT UNIQUE NOT NULL,
                                               login TEXT UNIQUE NOT NULL,
                                               password TEXT NOT NULL,
                                               photo TEXT,
                                               role TEXT DEFAULT 'user'
          )`);

  db.run(`CREATE TABLE IF NOT EXISTS hotels (
                                                id INTEGER PRIMARY KEY AUTOINCREMENT,
                                                title TEXT NOT NULL,
                                                description TEXT NOT NULL,
                                                price TEXT NOT NULL,
                                                rating TEXT NOT NULL,
                                                image TEXT NOT NULL
          )`);

  db.run(`CREATE TABLE IF NOT EXISTS bookings (
                                                  id INTEGER PRIMARY KEY AUTOINCREMENT,
                                                  user_login TEXT NOT NULL,
                                                  hotel_id INTEGER NOT NULL,
                                                  booked_at TEXT DEFAULT CURRENT_TIMESTAMP
          )`);

  // –°–∏–¥ –æ—Ç–µ–ª–µ–π
  db.get(`SELECT COUNT(*) AS cnt FROM hotels`, (err, row) => {
    if (err) return console.error(err);
    if (row.cnt === 0) {
      const stmt = db.prepare(`INSERT INTO hotels (title,description,price,rating,image) VALUES (?,?,?,?,?)`);
      initialHotels.forEach(h => stmt.run(h.title, h.description, h.price, h.rating, h.image));
      stmt.finalize();
      console.log(`üå± –í—Å—Ç–∞–≤–ª–µ–Ω–æ ${initialHotels.length} –æ—Ç–µ–ª–µ–π`);
    }
  });

  // –°–∏–¥ –∞–¥–º–∏–Ω–∞
  db.get(`SELECT * FROM users WHERE login = 'admin'`, (err, user) => {
    if (!user) {
      db.run(`INSERT INTO users (name,surname,email,login,password,photo,role) VALUES ('–ê–¥–º–∏–Ω','–ì–ª–∞–≤–Ω—ã–π','admin@example.com','admin','admin',null,'admin')`);
    }
  });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
const isAdmin = (login, cb) => {
  db.get(`SELECT role FROM users WHERE login = ?`, [login], (e, row) => cb(e, row?.role === 'admin'));
};

// REST API
app.get('/api/hotels', (_, res) => {
  db.all('SELECT * FROM hotels', [], (e, rows) => e
    ? res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ë–î' })
    : res.json(rows)
  );
});

app.post('/api/hotels', (req, res) => {
  const { login, title, description, price, rating, image } = req.body;
  isAdmin(login, (e, ok) => {
    if (e) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ë–î' });
    if (!ok) return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    db.run(
      'INSERT INTO hotels (title,description,price,rating,image) VALUES (?,?,?,?,?)',
      [title, description, price, rating, image],
      function(err) {
        if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è' });
        res.json({ message: '–û—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω', id: this.lastID });
      }
    );
  });
});

app.put('/api/hotels/:id', (req, res) => {
  const id = req.params.id;
  const { login, title, description, price, rating, image } = req.body;
  isAdmin(login, (e, ok) => {
    if (e) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ë–î' });
    if (!ok) return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    db.run(
      'UPDATE hotels SET title=?,description=?,price=?,rating=?,image=? WHERE id=?',
      [title, description, price, rating, image, id],
      err => err
        ? res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' })
        : res.json({ message: '–û—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω' })
    );
  });
});

app.delete('/api/hotels/:id', (req, res) => {
  const id = req.params.id;
  const { login } = req.body;
  isAdmin(login, (e, ok) => {
    if (e) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ë–î' });
    if (!ok) return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    db.run('DELETE FROM hotels WHERE id=?', [id], err =>
      err
        ? res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' })
        : res.json({ message: '–û—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' })
    );
  });
});

app.post('/api/register', (req, res) => {
  const { name, surname, email, login, password, photo } = req.body;
  const role = login === 'admin' ? 'admin' : 'user';
  db.run(
    'INSERT INTO users (name,surname,email,login,password,photo,role) VALUES (?,?,?,?,?,?,?)',
    [name, surname, email, login, password, photo || null, role],
    err =>
      err
        ? res.status(400).json({ message: 'E-mail –∏–ª–∏ –ª–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' })
        : res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' })
  );
});

app.post('/api/login', (req, res) => {
  const { login, password } = req.body;
  db.get(
    'SELECT name,surname,email,login,photo,role FROM users WHERE login=? AND password=?',
    [login, password],
    (e, u) =>
      e
        ? res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ë–î' })
        : u
          ? res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', user: u })
          : res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' })
  );
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è + email
app.post('/api/book', (req, res) => {
  const { login, email, hotelId } = req.body;
  if (!login || !email || !hotelId) {
    return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (login/email/hotelId)' });
  }

  // 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—Ä–æ–Ω—å –≤ –ë–î
  db.run(
    'INSERT INTO bookings (user_login, hotel_id) VALUES (?, ?)',
    [login, hotelId],
    function(err) {
      if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏' });

      // 2) –î–æ—Å—Ç–∞—ë–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª—è –¥–ª—è –ø–∏—Å—å–º–∞
      db.get('SELECT title, price FROM hotels WHERE id=?', [hotelId], (e, hotel) => {
        if (e || !hotel) {
          console.error(e);
          return res.status(500).json({ message: '–û—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        const html = `
          <h2>–°–ø–∞—Å–∏–±–æ –∑–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!</h2>
          <p>–û—Ç–µ–ª—å: <b>${hotel.title}</b></p>
          <p>–¶–µ–Ω–∞: ${hotel.price}</p>
          <p>–î–æ –≤—Å—Ç—Ä–µ—á–∏!</p>
        `;
        mailer.sendMail(
          {
            from: '"HotelFinder" <no-reply@hotelfinder.kz>',
            to: email,
            subject: `–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${hotel.title}`,
            html
          },
          mailErr => {
            if (mailErr) console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', mailErr);
          }
        );

        // 4) –û—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        res.json({ success: true });
      });
    }
  );
});

// –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`));
